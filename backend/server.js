require('dotenv').config();
const express = require('express');
const mysql = require('mysql2/promise');
const cors = require('cors');

const app = express();
app.use(cors());
app.use(express.json());

const PORT = process.env.PORT || 4000;

let connection;

// ConexÃ£o com o MySQL
async function start() {
Â  try {
Â  Â  connection = await mysql.createConnection({
Â  Â  Â  host: process.env.DB_HOST,
Â  Â  Â  user: process.env.DB_USER,
Â  Â  Â  password: process.env.DB_PASS,
Â  Â  Â  database: process.env.DB_NAME,
Â  Â  Â  port: process.env.DB_PORT,
      // ðŸ”‘ SOLUÃ‡ÃƒO: Adiciona a configuraÃ§Ã£o SSL para cumprir a exigÃªncia do Azure
Â  Â  Â  ssl: { 
          // Desabilita a verificaÃ§Ã£o rigorosa do certificado, permitindo a conexÃ£o
          rejectUnauthorized: false 
      }
Â  Â  });
Â  Â  console.log('Conectado ao banco com sucesso!');

Â  Â  app.listen(PORT, () => {
Â  Â  Â  console.log(`Servidor rodando na porta ${PORT}`);
Â  Â  });
Â  } catch (err) {
Â  Â  console.error('Erro ao conectar ao banco:', err);
Â  }
}

start();

// -------------------------
// Endpoints bÃ¡sicos
// -------------------------

// VeÃ­culos
app.get('/api/vehicles', async (req, res) => {
Â  try {
Â  Â  const [rows] = await connection.execute('SELECT * FROM vehicles');
Â  Â  res.json(rows);
Â  } catch (err) {
Â  Â  res.status(500).json({ error: err.message });
Â  }
});

app.post('/api/vehicles', async (req, res) => {
Â  try {
Â  Â  const { brand, model, year, plate, daily_price, available } = req.body;
Â  Â  const [result] = await connection.execute(
Â  Â  Â  'INSERT INTO vehicles (brand, model, year, plate, daily_price, available) VALUES (?, ?, ?, ?, ?, ?)',
Â  Â  Â  [brand, model, year, plate, daily_price, available]
Â  Â  );
Â  Â  res.json({ id: result.insertId });
Â  } catch (err) {
Â  Â  res.status(500).json({ error: err.message });
Â  }
});

// Clientes
app.get('/api/clients', async (req, res) => {
Â  try {
Â  Â  const [rows] = await connection.execute('SELECT * FROM clients');
Â  Â  res.json(rows);
Â  } catch (err) {
Â  Â  res.status(500).json({ error: err.message });
Â  }
});

app.post('/api/clients', async (req, res) => {
Â  try {
Â  Â  const { full_name, email, phone, document } = req.body;
Â  Â  const [result] = await connection.execute(
Â  Â  Â  'INSERT INTO clients (full_name, email, phone, document) VALUES (?, ?, ?, ?)',
Â  Â  Â  [full_name, email, phone, document]
Â  Â  );
Â  Â  res.json({ id: result.insertId });
Â  } catch (err) {
Â  Â  res.status(500).json({ error: err.message });
Â  }
});

// LocaÃ§Ãµes
app.get('/api/rentals', async (req, res) => {
Â  try {
Â  Â  const [rows] = await connection.execute('SELECT * FROM rentals');
Â  Â  res.json(rows);
Â  } catch (err) {
Â  Â  res.status(500).json({ error: err.message });
Â  }
});

app.post('/api/rentals', async (req, res) => {
Â  try {
Â  Â  const { client_id, vehicle_id, start_datetime, end_datetime, total_price, status } = req.body;
Â  Â  const [result] = await connection.execute(
Â  Â  Â  'INSERT INTO rentals (client_id, vehicle_id, start_datetime, end_datetime, total_price, status) VALUES (?, ?, ?, ?, ?, ?)',
Â  Â  Â  [client_id, vehicle_id, start_datetime, end_datetime, total_price, status || 'ACTIVE']
Â  Â  );
Â  Â  res.json({ id: result.insertId });
Â  } catch (err) {
Â  Â  res.status(500).json({ error: err.message });
Â  }
});